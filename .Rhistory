help(solve)
?solve
help("[[")
help.start()
?help.search
install.packages("islr", dependencies = TRUE)
install.packages("ISLR", dependencies = TRUE)
x = rnorm(100)
y = rnorm(100)
pdf("Figure.pdf")
plot(x, y, col = "green")
dev.off()
x = seq(-pi, pi ,length = 50)
x
y=x
f=outer(x,y,function(x,y)cos(y)/(1+x^2))
contour(x,y,f)
contour(x,y,f,nlevels=45,add=T)
fa=(f-t(f))/2
contour(x,y,fa,nlevels=15)
image(x,y,fa)
persp(x,y,fa)
persp(x,y,fa, theta=30)
persp(x,y,fa, theta=30, phi=20)
persp(x,y,fa, theta=30, phi=70)
persp(x,y,fa, theta=30, phi=40)
persp(x,y,fa, theta450)
persp(x,y,fa, theta=45)
Auto=read.table("Auto.data")
Auto=read.table("Auto.data")
fix(Auto)
Auto=read.table("Auto.data", header=T, na.strings="?")
fix(Auto)
?read.table
fix(Auto)
dim(Auto)
Auto[1:4,]
Auto=na.omit(Auto)
dim(Auto)
names(Auto)
plot(Auto$cylinders, Auto$mpg)
attach(Auto)
cylinders = as.factor(cylinders)
plot(cylinders, mpg)
plot(cylinders, mpg, col="red")
plot(cylinders, mpg, col="red", varwidth=T)
plot(cylinders, mpg, col="red", varwidth=T,horizontal=T)
plot(cylinders, mpg, col="red", varwidth=T, xlab="cylinders", ylab="MPG")
hist(mpg)
hist(mpg)
hist(mpg,col=2)
hist(mpg,col=2,breaks=15)
pairs(Auto)
pdf("Figure.pdf")
pairs(~ mpg + displacement + horsepower + weight + acceleration, Auto)
dev.off()
plot(horsepower,mpg)
identify(horsepower,mpg,name)
identify(horsepower,mpg,name)
summary(Auto)
summary(mpg)
?rnorm
test = 1:1000
test[3]
randomWork <- function( num ) {
seq = 0:num-1
err = rnorm(num, 0, 2)
for(i in 2:num) {
seq[i] = seq[i-1] + err
}
plot(seq)
}
randomWork(100)
err
err = rnorm(100,0,2)
err
randomWork <- function( num ) {
seq = 0:num-1
err = rnorm(num, 0, 2)
for(i in 2:num) {
seq[i] = seq[i-1] + err[i]
}
plot(seq)
}
randomWork(100)
randomWork <- function( num ) {
seq = 0:num-1
err = rnorm(num, 0, 2)
for(i in 2:num) {
seq[i] = seq[i-1] + err[i]
}
plot(seq,type=1)
}
randomWork(100)
randomWork <- function( num ) {
seq = 0:num-1
err = rnorm(num, 0, 2)
for(i in 2:num) {
seq[i] = seq[i-1] + err[i]
}
plot(seq)
}
randomWork(1000)
?plot
randomWork <- function( num ) {
seq = 0:num-1
err = rnorm(num, 0, 2)
for(i in 2:num-1) {
seq[i] = seq[i-1] + err[i]
}
seq
plot(seq, type=l)
}
randomWork(1000)
randomWork <- function( num ) {
seq = 0:num-1
err = rnorm(num, 0, 2)
for(i in 2:num) {
seq[i] = seq[i-1] + err[i]
}
seq
plot(seq, type=l)
}
randomWork(1000)
randomWork <- function( num ) {
seq = 0:num-1
err = rnorm(num, 0, 2)
for(i in 2:num) {
seq[i] = seq[i-1] + err[i]
}
seq
plot(seq, type="l")
}
randomWork(1000)
for(i in 2:5) {}
test[0]
test[1]
test[2]
seq = 0:num-1
seq = 0:999
seq[1000]
for(i in 2:num) {
seq[i] = seq[i-1] + err[i]
}
for(i in 2:1000) {
seq[i] = seq[i-1] + err[i]
}
seq
seq[1000]
?cumsum
err[1:10]
randomWork <- function( num ) {
seq = 0:num-1
err = rnorm(num, 0, 2)
for(i in 2:num) {
seq[i] = seq[i-1] + cumsum(err[1:i])
}
seq
plot(seq, type="l")
}
randomWork(1000)
cumsum(err[1:3])
cumsum(err[1:3])
cumsum(err)
randomWork <- function( num ) {
seq = 0:num-1
err = cumsum(rnorm(num, 0, 2))
for(i in 1:num) {
seq[i+1] = seq[i] + err[i+1]
}
seq
plot(seq, type="l")
}
randomWork(1000)
randomWork <- function( num ) {
seq = 0:num-1
err = cumsum(rnorm(num, 0, 2))
for(i in 1:num) {
seq[i+1] <- seq[i] + err[i+1]
}
plot(seq, type="l")
}
randomWork(1000)
seq = 0:999
err = cumsum(rnorm(1000,0,2))
err
for(i in 1:1000) {}
for(i in 1:1000)
seq[i+1] = seq[i] + err[i+1]
seq
randomWork <- function( num ) {
seq = 0:num-1
err = rnorm(num, 0, 2)
for(i in 1:num) {
seq[i+1] <- seq[i] + err[i+1]
}
plot(seq, type="l")
}
randomWork(100)
randomWork(1000)
randomWork(1000)
randomWork(1000)
randomWork <- function( num ) {
seq = 0:num-1
err = rnorm(num, 0, 2)
for(i in 1:num) {
seq[i+1] = seq[i] + err[i+1]
}
plot(seq, type="l")
}
randomWork(1000)
legend(1, o_range[2], c("mu = 0.2,  sigma = 0.375","mu = 0.1,  sigma = 0.2","Brownian motion"), cex=0.8,
col=c("deepskyblue1","chartreuse2","coral1"), pch=1, lty=1)
maturity <- 15
simulation.length <- 10001
dt <-  maturity/(simulation.length-1)
timeline <- seq(0,maturity, dt)
S0<-1
r<-0.05
mu<-0.1
mu0<-0.2
sigma<-0.2
sigma0<-0.375
f <- g <- g0 <- h <- h0 <- rep(0, times=simulation.length)
g0[1] <- h0[1] <- g[1] <-  h[1] <- S0
for(i in 2:simulation.length){
f[i] <- f[i-1]+sqrt(dt)*rnorm(1)
g[i] <- g[1]*exp((mu-(sigma^2)/2)*(i-1)*dt+sigma*f[i])
g0[i] <- g0[1]*exp(mu*(i-1)*dt)
h[i] <- h[1]*exp((mu0-sigma0^2/2)*(i-1)*dt+sigma0*f[i])
h0[i] <- h0[1]*exp(mu0*(i-1)*dt)
}
o_range <- range(f,g,g0,h,h0)
plot(timeline,f, ylim=o_range, type="l", col="coral1")
lines(timeline,g0, col="chartreuse3")
lines(timeline,g, col="chartreuse2")
lines(timeline,h, col="deepskyblue1")
lines(timeline,h0, col="deepskyblue3")
title(main="Geometric Brownian Motion trajectories", col.main="red", font.main=4)
legend(1, o_range[2], c("mu = 0.2,  sigma = 0.375","mu = 0.1,  sigma = 0.2","Brownian motion"), cex=0.8,
col=c("deepskyblue1","chartreuse2","coral1"), pch=1, lty=1)
randomWork(2000)
maturity <- 15
simulation.length <- 10001
dt <-  maturity/(simulation.length-1)
timeline <- seq(0,maturity, dt)
S0<-1
r<-0.05
mu<-0.1
mu0<-0.2
sigma<-0.2
sigma0<-0.375
f <- g <- g0 <- h <- h0 <- rep(0, times=simulation.length)
g0[1] <- h0[1] <- g[1] <-  h[1] <- S0
for(i in 2:simulation.length){
f[i] <- f[i-1]+sqrt(dt)*rnorm(1)
g[i] <- g[1]*exp((mu-(sigma^2)/2)*(i-1)*dt+sigma*f[i])
g0[i] <- g0[1]*exp(mu*(i-1)*dt)
h[i] <- h[1]*exp((mu0-sigma0^2/2)*(i-1)*dt+sigma0*f[i])
h0[i] <- h0[1]*exp(mu0*(i-1)*dt)
}
o_range <- range(f,g,g0,h,h0)
plot(timeline,f, ylim=o_range, type="l", col="coral1")
lines(timeline,g0, col="chartreuse3")
lines(timeline,g, col="chartreuse2")
lines(timeline,h, col="deepskyblue1")
lines(timeline,h0, col="deepskyblue3")
title(main="Geometric Brownian Motion trajectories", col.main="red", font.main=4)
legend(1, o_range[2], c("mu = 0.2,  sigma = 0.375","mu = 0.1,  sigma = 0.2","Brownian motion"), cex=0.8,
col=c("deepskyblue1","chartreuse2","coral1"), pch=1, lty=1)
read.table("Auto.data", header = TRUE)
file = read.table("Auto.data", header = TRUE)
View(file)
setwd("C:/Users/pfan8/Documents/R")
MEdata=read.table("http://eclab.jnu.edu.cn/stat/MEdata.txt",header=T)
MEdata=read.table("http://eclab.jnu.edu.cn/stat/MEdata.txt",header=T)
?plot
install.packages("fBasics", dependencies = TRUE)
?legend
randomWork(100)
randomWork(1000)
randomWork(10000)
randomWork(10000)
file = file[-2]
file
file = file[-2]
file
file = file[-2]
file = file[-1]
file = file[-1]
file = file[-3]
file = file[-3]
file = file[-3]
file = file[-3]
install.packages("quantmod", dependencies = TRUE)
source('~/R/prac.R', echo=TRUE)
library(quantmod)
getSymbols("Alibaba")
MSFT_Index = getSymbols("MSFT")
MSFT_Index = getSymbols("Alibaba", src = "google")
Stock_Index = getSymbols("600519.SH", src = "yahoo")
Stock_Index = getSymbols("600519.SH", src = "google")
setSymbolLookup(GZMT=list(name='600519.ss',src='yahoo'))
Stock_Index = getSymbols("GZMT")
chartSeries(GZMT)
getSymbols("AAPL")
getSymbols("MSFT")
chartSeries(Stock_Index[, 'Open'],theme="white",up.col="red",dn.col="balck")
View(GZMT)
chartSeries(GZMT[, 'Open'],theme="white",up.col="red",dn.col="balck")
msft=getYahooData("GZMT",start=20120101)
chartSeries(GZMT[, 'Open'],theme="white",up.col="red",dn.col="balck")
msft=getYahooData("MSFT",start=20120101)
msft=getYahooData("MSFT",start=20120101)
chartSeries(msft[, 'Open'],theme="white",up.col="red",dn.col="balck")
addBBands() # 增加布林线
addRSI()
add_MACD()
add_MACD()
?getYahooData
AAPL
summary(AAPL$Data)
AAPL$Data
View(AAPL)
View(AAPL)
summary(AAPL$Open)
summary(AAPL.Open)
AAPL.Open
summary(AAPL[1])
summary(AAPL[:1000])
summary(AAPL[1:1000])
AAPL
AAPL[open]
head(AAPL)
AAPL[,1]
AAPL[,col="Open"]
AAPL[,col("Open")]
AAPL[,1]
?arrayInd
which(colnames(AAPL) = "Open")
which(colnames(AAPL) == "Open")
which(colnames(AAPL) == "Close")
a = which(colnames(AAPL) == "Close")
a
a = which(colnames(AAPL) == "Close")
a
colnames(AAPL)
a = which(colnames(AAPL) == "AAPL.Close")
a
